namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace mhs = "http://www.masshist.org/ns/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
default namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2018-11-13T01:49:36Z. .
# TEI Edition: Version 3.5.0a. Last updated on
#	12th October 2018, revision ae63ddc
# TEI Edition Location: http://www.tei-c.org/Vault/P5/Version 3.5.0a./
#  Scehema intended to support at least jqa/ & correspondence/ 

# Available under the terms of the Creative Commons Attribution-ShareAlike 4.0 International license.
codem_macro.paraContent =
  (text
   | codem_model.gLike
   | codem_model.phrase
   | codem_model.inter
   | codem_model.global
   | codem_model.lLike)*
codem_macro.phraseSeq =
  (text
   | codem_model.gLike
   | codem_model.qLike
   | codem_model.phrase
   | codem_model.global)*
codem_macro.specialPara =
  (text
   | codem_model.gLike
   | codem_model.phrase
   | codem_model.inter
   | codem_model.divPart
   | codem_model.global)*
codem_att.ascribed.attributes = codem_att.ascribed.attribute.who
codem_att.ascribed.attribute.who =
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { xsd:anyURI+ }
  }?
codem_att.canonical.attributes =
  codem_att.canonical.attribute.key, codem_att.canonical.attribute.ref
codem_att.canonical.attribute.key =
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { xsd:string }?
codem_att.canonical.attribute.ref =
  ## (reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.
  attribute ref {
    list { xsd:anyURI+ }
  }?
codem_att.ranging.attributes =
  codem_att.ranging.attribute.atLeast,
  codem_att.ranging.attribute.atMost,
  codem_att.ranging.attribute.min,
  codem_att.ranging.attribute.max,
  codem_att.ranging.attribute.confidence
codem_att.ranging.attribute.atLeast =
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
codem_att.ranging.attribute.atMost =
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
codem_att.ranging.attribute.min =
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
codem_att.ranging.attribute.max =
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
codem_att.ranging.attribute.confidence =
  ## specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { xsd:double }?
codem_att.dimensions.attributes =
  codem_att.ranging.attributes,
  codem_att.dimensions.attribute.unit,
  codem_att.dimensions.attribute.quantity,
  codem_att.dimensions.attribute.extent,
  codem_att.dimensions.attribute.precision,
  codem_att.dimensions.attribute.scope
codem_att.dimensions.attribute.unit =
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm (centimetres) ; 2] mm (millimetres) ; 3] in (inches) ; 4] lines; 5] chars (characters) 
  attribute unit {
    ## (centimetres) 
    "cm" | ## (millimetres) 
      "mm" | ## (inches) 
      "in" | ## lines of text
      "lines" | ## (characters) characters of text
      "chars"
    | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.dimensions.attribute.quantity =
  ## specifies the length in the units specified
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
codem_att.dimensions.attribute.extent =
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
  attribute extent { xsd:string }?
codem_att.dimensions.attribute.precision =
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision {
    "high" | "medium" | "low" | "unknown"
  }?
codem_att.dimensions.attribute.scope =
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.written.attributes = codem_att.written.attribute.hand
codem_att.written.attribute.hand =
  ## points to a handNote element describing the hand considered responsible for the content of the element concerned.
  attribute hand { xsd:anyURI }?
codem_att.breaking.attributes = codem_att.breaking.attribute.break
codem_att.breaking.attribute.break =
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.cReferencing.attributes =
  codem_att.cReferencing.attribute.cRef
codem_att.cReferencing.attribute.cRef =
  ## (canonical reference) specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a refsDecl element in the TEI header
  attribute cRef { xsd:string }?
codem_att.datable.w3c.attributes =
  codem_att.datable.w3c.attribute.when,
  codem_att.datable.w3c.attribute.notBefore,
  codem_att.datable.w3c.attribute.notAfter,
  codem_att.datable.w3c.attribute.from,
  codem_att.datable.w3c.attribute.to
codem_att.datable.w3c.attribute.when =
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
codem_att.datable.w3c.attribute.notBefore =
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
codem_att.datable.w3c.attribute.notAfter =
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
codem_att.datable.w3c.attribute.from =
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
codem_att.datable.w3c.attribute.to =
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
sch:pattern [
  id = "codem-att.datable.w3c-att-datable-w3c-when-constraint-rule-1"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@when]"
    "\x{a}" ~
    "        "
    sch:report [
      test = "@notBefore|@notAfter|@from|@to"
      role = "nonfatal"
      "The @when attribute cannot be used with any other att.datable.w3c attributes."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "codem-att.datable.w3c-att-datable-w3c-from-constraint-rule-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@from]"
    "\x{a}" ~
    "        "
    sch:report [
      test = "@notBefore"
      role = "nonfatal"
      "The @from and @notBefore attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "codem-att.datable.w3c-att-datable-w3c-to-constraint-rule-3"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@to]"
    "\x{a}" ~
    "        "
    sch:report [
      test = "@notAfter"
      role = "nonfatal"
      "The @to and @notAfter attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
codem_att.datable.attributes =
  codem_att.datable.w3c.attributes,
  codem_att.datable.attribute.calendar,
  codem_att.datable.attribute.period
codem_att.datable.attribute.calendar =
  ## indicates the system or calendar to which the date represented by the content of this element belongs.
  attribute calendar { xsd:anyURI }?
sch:pattern [
  id = "codem-att.datable-calendar-calendar-constraint-rule-4"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "string-length(.) gt 0"
      "\x{a}" ~
      "@calendar indicates the system or calendar to which the date represented by the content of this element\x{a}" ~
      "belongs, but this "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
codem_att.datable.attribute.period =
  ## supplies a pointer to some location defining a named period of time within which the datable item is understood to have occurred.
  attribute period { xsd:anyURI }?
codem_att.declarable.attributes = codem_att.declarable.attribute.default
codem_att.declarable.attribute.default =
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    ## This element is selected if its parent is selected
    "true" | ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
codem_att.declaring.attributes = codem_att.declaring.attribute.decls
codem_att.declaring.attribute.decls =
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { xsd:anyURI+ }
  }?
codem_att.fragmentable.attributes =
  codem_att.fragmentable.attribute.part
codem_att.fragmentable.attribute.part =
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y" | ## (no) the element is not fragmented, or no claim is made as to its completeness
      "N" | ## (initial) this is the initial part of a fragmented element
      "I" | ## (medial) this is a medial part of a fragmented element
      "M" | ## (final) this is the final part of a fragmented element
      "F"
  }?
codem_att.divLike.attributes =
  codem_att.fragmentable.attributes,
  codem_att.divLike.attribute.org,
  codem_att.divLike.attribute.sample
codem_att.divLike.attribute.org =
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite" | ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
codem_att.divLike.attribute.sample =
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    ## division lacks material present at end in source.
    "initial" | ## division lacks material at start and end.
      "medial" | ## division lacks material at start.
      "final" | ## position of sampled material within original unknown.
      "unknown" | ## division is not a sample.
      "complete"
  }?
codem_att.docStatus.attributes = codem_att.docStatus.attribute.status
codem_att.docStatus.attribute.status =
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ]
  attribute status {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.global.responsibility.attributes =
  codem_att.global.responsibility.attribute.cert,
  codem_att.global.responsibility.attribute.resp
codem_att.global.responsibility.attribute.cert =
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert {
    xsd:double
    | (
       "high" | "medium" | "low" | "unknown")
  }?
codem_att.global.responsibility.attribute.resp =
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { xsd:anyURI+ }
  }?
codem_att.editLike.attributes =
  codem_att.editLike.attribute.evidence,
  codem_att.editLike.attribute.instant
codem_att.editLike.attribute.evidence =
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal" | ## there is external evidence to support the intervention.
         "external" | ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" })+
    }
  }?
codem_att.editLike.attribute.instant =
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ]
  attribute instant {
    xsd:boolean
    | (
       "unknown" | "inapplicable")
  }?
codem_att.global.rendition.attributes =
  codem_att.global.rendition.attribute.rend,
  codem_att.global.rendition.attribute.style,
  codem_att.global.rendition.attribute.rendition
codem_att.global.rendition.attribute.rend =
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
codem_att.global.rendition.attribute.style =
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { xsd:string }?
codem_att.global.rendition.attribute.rendition =
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { xsd:anyURI+ }
  }?
codem_att.global.source.attributes =
  codem_att.global.source.attribute.source
codem_att.global.source.attribute.source =
  ## specifies the source from which some aspect of this element is drawn.
  attribute source {
    list { xsd:anyURI+ }
  }?
codem_att.global.attributes =
  codem_att.global.rendition.attributes,
  codem_att.global.facs.attributes,
  codem_att.global.change.attributes,
  codem_att.global.responsibility.attributes,
  codem_att.global.source.attributes,
  codem_att.global.attribute.xmlid,
  codem_att.global.attribute.n,
  codem_att.global.attribute.xmllang,
  codem_att.global.attribute.xmlbase,
  codem_att.global.attribute.xmlspace
codem_att.global.attribute.xmlid =
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
codem_att.global.attribute.n =
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { xsd:string }?
codem_att.global.attribute.xmllang =
  ## (language) indicates the language of the element content using a tag generated according to BCP 47.
  attribute xml:lang {
    xsd:language
    | (
       "")
  }?
codem_att.global.attribute.xmlbase =
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { xsd:anyURI }?
codem_att.global.attribute.xmlspace =
  ## signals an intention about how white space should be managed by applications.
  attribute xml:space {
    ## signals that the application's default white-space processing modes are acceptable
    "default" | ## indicates the intent that applications preserve all white space
      "preserve"
  }?
codem_att.internetMedia.attributes =
  codem_att.internetMedia.attribute.mimeType
codem_att.internetMedia.attribute.mimeType =
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
codem_att.naming.attributes =
  codem_att.canonical.attributes,
  codem_att.naming.attribute.role,
  codem_att.naming.attribute.nymRef
codem_att.naming.attribute.role =
  ## may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.
  attribute role {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
codem_att.naming.attribute.nymRef =
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { xsd:anyURI+ }
  }?
codem_att.placement.attributes = codem_att.placement.attribute.place
codem_att.placement.attribute.place =
  ## specifies where this item is placed.
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below" | ## at the foot of the page
         "bottom" | ## in the margin (left, right, or both)
         "margin" | ## at the top of the page
         "top" | ## on the opposite, i.e. facing, page
         "opposite" | ## on the other side of the leaf
         "overleaf" | ## above the line
         "above" | ## at the end of e.g. chapter or volume.
         "end" | ## within the body of the text.
         "inline" | ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" })+
    }
  }?
codem_att.typed.attributes =
  codem_att.typed.attribute.type, codem_att.typed.attribute.subtype
codem_att.typed.attribute.type =
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.typed.attribute.subtype =
  ## provides a sub-categorization of the element, if needed
  attribute subtype {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
sch:pattern [
  id = "codem-att.typed-subtypeTyped-constraint-rule-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@subtype]"
    "\x{a}" ~
    "        "
    sch:assert [
      test = "@type"
      "The "
      sch:name [ ]
      " element should not be categorized in detail with @subtype unless also categorized in general with @type"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
codem_att.pointing.attributes =
  codem_att.pointing.attribute.targetLang,
  codem_att.pointing.attribute.target,
  codem_att.pointing.attribute.evaluate
codem_att.pointing.attribute.targetLang =
  ## specifies the language of the content to be found at the destination referenced by target, using a language tag generated according to BCP 47.
  attribute targetLang {
    xsd:language
    | (
       "")
  }?
sch:pattern [
  id = "codem-att.pointing-targetLang-targetLang-constraint-rule-6"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "@target"
      "@targetLang should only be used on "
      sch:name [ ]
      " if @target is specified."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
codem_att.pointing.attribute.target =
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { xsd:anyURI+ }
  }?
codem_att.pointing.attribute.evaluate =
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all" | ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one" | ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
codem_att.sortable.attributes = codem_att.sortable.attribute.sortKey
codem_att.sortable.attribute.sortKey =
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.edition.attributes =
  codem_att.edition.attribute.ed, codem_att.edition.attribute.edRef
codem_att.edition.attribute.ed =
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
codem_att.edition.attribute.edRef =
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { xsd:anyURI+ }
  }?
codem_att.spanning.attributes = codem_att.spanning.attribute.spanTo
codem_att.spanning.attribute.spanTo =
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { xsd:anyURI }?
sch:pattern [
  id = "codem-att.spanning-spanTo-spanTo-2-constraint-rule-7"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "            "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "                  "
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
codem_att.tableDecoration.attribute.role =
  ## indicates the kind of information held in this cell or in each cell of this row.
  ## Suggested values include: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    ## labelling or descriptive information only.
    "label" | ## data values.
      "data"
    | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.tableDecoration.attribute.rows =
  ## indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { xsd:nonNegativeInteger }?
codem_att.tableDecoration.attribute.cols =
  ## (columns) indicates the number of columns occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute cols { xsd:nonNegativeInteger }?
codem_att.transcriptional.attributes =
  codem_att.editLike.attributes,
  codem_att.written.attributes,
  codem_att.transcriptional.attribute.status,
  codem_att.transcriptional.attribute.cause,
  codem_att.transcriptional.attribute.seq
codem_att.transcriptional.attribute.status =
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.transcriptional.attribute.cause =
  ## documents the presumed cause for the intervention.
  attribute cause {
    xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
  }?
codem_att.transcriptional.attribute.seq =
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:nonNegativeInteger }?
codem_model.nameLike.agent = codem_name
codem_model.nameLike.agent_alternation = codem_name
codem_model.nameLike.agent_sequence = codem_name
codem_model.nameLike.agent_sequenceOptional = codem_name?
codem_model.nameLike.agent_sequenceOptionalRepeatable = codem_name*
codem_model.nameLike.agent_sequenceRepeatable = codem_name+
codem_model.segLike = notAllowed
codem_model.hiLike = codem_hi
codem_model.hiLike_alternation = codem_hi
codem_model.hiLike_sequence = codem_hi
codem_model.hiLike_sequenceOptional = codem_hi?
codem_model.hiLike_sequenceOptionalRepeatable = codem_hi*
codem_model.hiLike_sequenceRepeatable = codem_hi+
codem_model.emphLike = codem_title
codem_model.emphLike_alternation = codem_title
codem_model.emphLike_sequence = codem_title
codem_model.emphLike_sequenceOptional = codem_title?
codem_model.emphLike_sequenceOptionalRepeatable = codem_title*
codem_model.emphLike_sequenceRepeatable = codem_title+
codem_model.highlighted = codem_model.hiLike | codem_model.emphLike
codem_model.dateLike = codem_date
codem_model.dateLike_alternation = codem_date
codem_model.dateLike_sequence = codem_date
codem_model.dateLike_sequenceOptional = codem_date?
codem_model.dateLike_sequenceOptionalRepeatable = codem_date*
codem_model.dateLike_sequenceRepeatable = codem_date+
codem_model.measureLike = notAllowed
codem_model.measureLike_alternation = notAllowed
codem_model.measureLike_sequence = empty
codem_model.measureLike_sequenceOptional = empty
codem_model.measureLike_sequenceOptionalRepeatable = empty
codem_model.measureLike_sequenceRepeatable = notAllowed
codem_model.egLike = notAllowed
codem_model.egLike_alternation = notAllowed
codem_model.egLike_sequence = empty
codem_model.egLike_sequenceOptional = empty
codem_model.egLike_sequenceOptionalRepeatable = empty
codem_model.egLike_sequenceRepeatable = notAllowed
codem_model.graphicLike = notAllowed
codem_model.offsetLike = notAllowed
codem_model.offsetLike_alternation = notAllowed
codem_model.offsetLike_sequence = empty
codem_model.offsetLike_sequenceOptional = empty
codem_model.offsetLike_sequenceOptionalRepeatable = empty
codem_model.offsetLike_sequenceRepeatable = notAllowed
codem_model.pPart.msdesc = notAllowed
codem_model.pPart.editorial = notAllowed
codem_model.pPart.editorial_alternation = notAllowed
codem_model.pPart.editorial_sequence = empty
codem_model.pPart.editorial_sequenceOptional = empty
codem_model.pPart.editorial_sequenceOptionalRepeatable = empty
codem_model.pPart.editorial_sequenceRepeatable = notAllowed
codem_model.pPart.transcriptional =
  codem_add | codem_unclear | codem_supplied
codem_model.pPart.transcriptional_alternation =
  codem_add | codem_unclear | codem_supplied
codem_model.pPart.transcriptional_sequence =
  codem_add, codem_unclear, codem_supplied
codem_model.pPart.transcriptional_sequenceOptional =
  codem_add?, codem_unclear?, codem_supplied?
codem_model.pPart.transcriptional_sequenceOptionalRepeatable =
  codem_add*, codem_unclear*, codem_supplied*
codem_model.pPart.transcriptional_sequenceRepeatable =
  codem_add+, codem_unclear+, codem_supplied+
codem_model.pPart.edit =
  codem_model.pPart.editorial | codem_model.pPart.transcriptional
codem_model.ptrLike = codem_ptr | codem_ref
codem_model.lPart = notAllowed
codem_model.global.meta = notAllowed
codem_model.milestoneLike = codem_pb | codem_lb | codem_cb
codem_model.gLike = notAllowed
codem_model.oddDecl = notAllowed
codem_model.oddDecl_alternation = notAllowed
codem_model.oddDecl_sequence = empty
codem_model.oddDecl_sequenceOptional = empty
codem_model.oddDecl_sequenceOptionalRepeatable = empty
codem_model.oddDecl_sequenceRepeatable = notAllowed
codem_model.phrase.xml = notAllowed
codem_model.specDescLike = notAllowed
codem_model.biblLike = codem_bibl
codem_model.biblLike_alternation = codem_bibl
codem_model.biblLike_sequence = codem_bibl
codem_model.biblLike_sequenceOptional = codem_bibl?
codem_model.biblLike_sequenceOptionalRepeatable = codem_bibl*
codem_model.biblLike_sequenceRepeatable = codem_bibl+
codem_model.headLike = codem_head
codem_model.headLike_alternation = codem_head
codem_model.headLike_sequence = codem_head
codem_model.headLike_sequenceOptional = codem_head?
codem_model.headLike_sequenceOptionalRepeatable = codem_head*
codem_model.headLike_sequenceRepeatable = codem_head+
codem_model.labelLike = codem_label
codem_model.labelLike_alternation = codem_label
codem_model.labelLike_sequence = codem_label
codem_model.labelLike_sequenceOptional = codem_label?
codem_model.labelLike_sequenceOptionalRepeatable = codem_label*
codem_model.labelLike_sequenceRepeatable = codem_label+
codem_model.listLike = codem_list | codem_table
codem_model.listLike_alternation = codem_list | codem_table
codem_model.listLike_sequence = codem_list, codem_table
codem_model.listLike_sequenceOptional = codem_list?, codem_table?
codem_model.listLike_sequenceOptionalRepeatable =
  codem_list*, codem_table*
codem_model.listLike_sequenceRepeatable = codem_list+, codem_table+
codem_model.noteLike = codem_note
codem_model.lLike = notAllowed
codem_model.lLike_alternation = notAllowed
codem_model.lLike_sequence = empty
codem_model.lLike_sequenceOptional = empty
codem_model.lLike_sequenceOptionalRepeatable = empty
codem_model.lLike_sequenceRepeatable = notAllowed
codem_model.pLike = codem_p
codem_model.pLike_alternation = codem_p
codem_model.pLike_sequence = codem_p
codem_model.pLike_sequenceOptional = codem_p?
codem_model.pLike_sequenceOptionalRepeatable = codem_p*
codem_model.pLike_sequenceRepeatable = codem_p+
codem_model.stageLike = notAllowed
codem_model.stageLike_alternation = notAllowed
codem_model.stageLike_sequence = empty
codem_model.stageLike_sequenceOptional = empty
codem_model.stageLike_sequenceOptionalRepeatable = empty
codem_model.stageLike_sequenceRepeatable = notAllowed
codem_model.global.edit = codem_space
codem_model.divPart = codem_model.lLike | codem_model.pLike
codem_model.placeNamePart = notAllowed
codem_model.placeNamePart_alternation = notAllowed
codem_model.placeNamePart_sequence = empty
codem_model.placeNamePart_sequenceOptional = empty
codem_model.placeNamePart_sequenceOptionalRepeatable = empty
codem_model.placeNamePart_sequenceRepeatable = notAllowed
codem_model.placeStateLike = codem_model.placeNamePart
codem_model.placeStateLike_alternation =
  codem_model.placeNamePart_alternation
codem_model.placeStateLike_sequence = codem_model.placeNamePart_sequence
codem_model.placeStateLike_sequenceOptional =
  codem_model.placeNamePart_sequenceOptional?
codem_model.placeStateLike_sequenceOptionalRepeatable =
  codem_model.placeNamePart_sequenceOptionalRepeatable*
codem_model.placeStateLike_sequenceRepeatable =
  codem_model.placeNamePart_sequenceRepeatable+
codem_model.publicationStmtPart.agency = notAllowed
codem_model.publicationStmtPart.detail =
  codem_model.ptrLike | codem_date | codem_availability
codem_model.availabilityPart = notAllowed
codem_model.certLike = notAllowed
codem_model.descLike = notAllowed
codem_model.quoteLike = notAllowed
codem_model.quoteLike_alternation = notAllowed
codem_model.quoteLike_sequence = empty
codem_model.quoteLike_sequenceOptional = empty
codem_model.quoteLike_sequenceOptionalRepeatable = empty
codem_model.quoteLike_sequenceRepeatable = notAllowed
codem_model.qLike = codem_model.quoteLike
codem_model.qLike_alternation = codem_model.quoteLike_alternation
codem_model.qLike_sequence = codem_model.quoteLike_sequence
codem_model.qLike_sequenceOptional =
  codem_model.quoteLike_sequenceOptional?
codem_model.qLike_sequenceOptionalRepeatable =
  codem_model.quoteLike_sequenceOptionalRepeatable*
codem_model.qLike_sequenceRepeatable =
  codem_model.quoteLike_sequenceRepeatable+
codem_model.respLike = codem_author | codem_editor
codem_model.divWrapper = codem_dateline | codem_salute
codem_model.divTopPart =
  codem_model.headLike | codem_opener | codem_signed
codem_model.divTop = codem_model.divWrapper | codem_model.divTopPart
codem_model.frontPart.drama = notAllowed
codem_model.pLike.front = codem_head
codem_model.divBottomPart = codem_closer | codem_signed
codem_model.divBottom =
  codem_model.divWrapper | codem_model.divBottomPart
codem_model.imprintPart = notAllowed
codem_model.addressLike = notAllowed
codem_model.addressLike_alternation = notAllowed
codem_model.addressLike_sequence = empty
codem_model.addressLike_sequenceOptional = empty
codem_model.addressLike_sequenceOptionalRepeatable = empty
codem_model.addressLike_sequenceRepeatable = notAllowed
codem_model.nameLike =
  codem_model.nameLike.agent
  | codem_model.offsetLike
  | codem_model.placeStateLike
  | codem_persRef
codem_model.nameLike_alternation =
  codem_model.nameLike.agent_alternation
  | codem_model.offsetLike_alternation
  | codem_model.placeStateLike_alternation
  | codem_persRef
codem_model.nameLike_sequence =
  codem_model.nameLike.agent_sequence,
  codem_model.offsetLike_sequence,
  codem_model.placeStateLike_sequence,
  codem_persRef
codem_model.nameLike_sequenceOptional =
  codem_model.nameLike.agent_sequenceOptional?,
  codem_model.offsetLike_sequenceOptional?,
  codem_model.placeStateLike_sequenceOptional?,
  codem_persRef?
codem_model.nameLike_sequenceOptionalRepeatable =
  codem_model.nameLike.agent_sequenceOptionalRepeatable*,
  codem_model.offsetLike_sequenceOptionalRepeatable*,
  codem_model.placeStateLike_sequenceOptionalRepeatable*,
  codem_persRef*
codem_model.nameLike_sequenceRepeatable =
  codem_model.nameLike.agent_sequenceRepeatable+,
  codem_model.offsetLike_sequenceRepeatable+,
  codem_model.placeStateLike_sequenceRepeatable+,
  codem_persRef+
codem_model.global =
  codem_model.global.meta
  | codem_model.milestoneLike
  | codem_model.noteLike
  | codem_model.global.edit
codem_model.biblPart =
  codem_model.respLike
  | codem_model.imprintPart
  | codem_bibl
  | codem_edition
  | codem_availability
codem_model.frontPart = codem_model.frontPart.drama
codem_model.pPart.data =
  codem_model.dateLike
  | codem_model.measureLike
  | codem_model.addressLike
  | codem_model.nameLike
codem_model.inter =
  codem_model.egLike
  | codem_model.oddDecl
  | codem_model.biblLike
  | codem_model.labelLike
  | codem_model.listLike
  | codem_model.stageLike
  | codem_model.qLike
codem_model.common = codem_model.divPart | codem_model.inter
codem_model.phrase =
  codem_model.segLike
  | codem_model.highlighted
  | codem_model.graphicLike
  | codem_model.pPart.msdesc
  | codem_model.pPart.edit
  | codem_model.ptrLike
  | codem_model.lPart
  | codem_model.phrase.xml
  | codem_model.specDescLike
  | codem_model.pPart.data
codem_model.divLike = codem_div
codem_model.divGenLike = notAllowed
codem_model.div1Like = notAllowed
codem_model.applicationLike = codem_application
codem_model.teiHeaderPart = codem_encodingDesc
codem_model.sourceDescPart = notAllowed
codem_model.encodingDescPart = codem_appInfo
codem_model.resourceLike = codem_text
codem_att.personal.attributes =
  codem_att.naming.attributes,
  codem_att.personal.attribute.full,
  codem_att.personal.attribute.sort
codem_att.personal.attribute.full =
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    ## the name component is spelled out in full.
    "yes" | ## (abbreviated) the name component is given in an abbreviated form.
      "abb" | ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
codem_att.personal.attribute.sort =
  ## specifies the sort order of the name component in relation to others within the name.
  attribute sort { xsd:nonNegativeInteger }?

codem_p =
  ## (paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]
  element p {
    codem_macro.paraContent
    >> sch:pattern [
         id = "codem-p-abstractModel-structure-p-constraint-report-5"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum                |parent::tei:item                |parent::tei:note                |parent::tei:q                |parent::tei:quote                |parent::tei:remarks                |parent::tei:said                |parent::tei:sp                |parent::tei:stage                |parent::tei:cell                |parent::tei:figure                )"
             "\x{a}" ~
             "        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "codem-p-abstractModel-structure-l-constraint-report-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:p[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    codem_att.global.attributes,
    codem_att.declaring.attributes,
    codem_att.fragmentable.attributes,
    codem_att.written.attributes,
    empty
  }

codem_hi =
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element hi {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.written.attributes,
    empty
  }

codem_add =
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. [3.4.3. Additions, Deletions, and Omissions]
  element add {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.transcriptional.attributes,
    codem_att.placement.attributes,
    codem_att.typed.attributes,
    codem_att.dimensions.attributes,
    empty
  }

codem_unclear =
  ## contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1. Damage, Illegibility, and Supplied Text 3.4.3. Additions, Deletions, and Omissions]
  element unclear {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.editLike.attributes,
    codem_att.dimensions.attributes,
    ## indicates why the material is hard to transcribe.
    ## Suggested values include: 1] illegible; 2] inaudible; 3] faded; 4] background_noise; 5] eccentric_ductus
    attribute reason {
      list {
        (
         "illegible" | "inaudible" | "faded" | "background_noise" | "eccentric_ductus"
         | xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" })+
      }
    }?,
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
    attribute agent {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
    }?,
    empty
  }

codem_name =
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. Referring Strings]
  element name {
    codem_macro.phraseSeq,
    codem_att.global.attributes,
    codem_att.personal.attributes,
    codem_att.datable.attributes,
    codem_att.editLike.attributes,
    codem_att.typed.attributes,
    empty
  }

codem_date =
  ## contains a date in any format. [3.5.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.11.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.3.6. Dates and Times]
  element date {
    (text
     | codem_model.gLike
     | codem_model.phrase
     | codem_model.global)*,
    codem_att.global.attributes,
    codem_att.datable.attributes,
    codem_att.editLike.attributes,
    codem_att.dimensions.attributes,
    codem_att.typed.attribute.subtype,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      "creation" | "transcription"
    }?,
    empty
  }

codem_ptr =
  ## (pointer) defines a pointer to another location. [3.6. Simple Links and Cross-References 16.1. Links]
  element ptr {
    empty
    >> sch:pattern [
         id = "codem-ptr-ptrAtts-constraint-report-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    codem_att.global.attributes,
    codem_att.pointing.attributes,
    codem_att.internetMedia.attributes,
    codem_att.typed.attributes,
    codem_att.declaring.attributes,
    codem_att.cReferencing.attributes,
    empty
  }

codem_ref =
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.6. Simple Links and Cross-References 16.1. Links]
  element ref {
    codem_macro.paraContent
    >> sch:pattern [
         id = "codem-ref-refAtts-constraint-report-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    codem_att.global.attributes,
    codem_att.pointing.attributes,
    codem_att.internetMedia.attributes,
    codem_att.typed.attributes,
    codem_att.declaring.attributes,
    codem_att.cReferencing.attributes,
    empty
  }

codem_list =
  ## contains any sequence of items organized as a list. [3.7. Lists]
  element list {
    ((codem_model.divTop | codem_model.global)*,
     ((codem_item, codem_model.global*)+
      | (codem_label,
         codem_model.global*,
         codem_item,
         codem_model.global*)+),
     (codem_model.divBottom, codem_model.global*)*)
    >> sch:pattern [
         id = "codem-list-gloss-list-must-have-labels-constraint-rule-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:list[@type='gloss']"
           "\x{a}" ~
           "	              "
           sch:assert [
             test = "tei:label"
             'The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    codem_att.global.attributes,
    codem_att.sortable.attributes,
    codem_att.typed.attribute.subtype,
    empty
  }

codem_item =
  ## contains one component of a list. [3.7. Lists 2.6. The Revision Description]
  element item {
    codem_macro.specialPara,
    codem_att.global.attributes,
    codem_att.sortable.attributes,
    empty
  }

codem_label =
  ## contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.7. Lists]
  element label {
    codem_macro.phraseSeq,
    codem_att.global.attributes,
    codem_att.typed.attributes,
    codem_att.placement.attributes,
    codem_att.written.attributes,
    empty
  }

codem_head =
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]
  element head {
    (text
     | codem_model.gLike
     | codem_model.phrase
     | codem_model.inter
     | codem_model.lLike
     | codem_model.global)*,
    codem_att.global.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.placement.attributes,
    codem_att.written.attributes,
    empty
  }

codem_note =
  ## contains a note or annotation. [3.8.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.11.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]
  element note {
    codem_macro.specialPara,
    codem_att.global.attributes,
    codem_att.placement.attributes,
    codem_att.pointing.attributes,
    codem_att.typed.attributes,
    codem_att.written.attributes,
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ] attribute anchored { xsd:boolean }?,
    ## points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
    attribute targetEnd {
      list { xsd:anyURI+ }
    }?,
    empty
  }

codem_pb =
  ## (page beginning) marks the beginning of a new page in a paginated document. [3.10.3. Milestone
  ## Elements]
  element pb {
    empty,
    codem_att.global.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.edition.attributes,
    codem_att.spanning.attributes,
    codem_att.breaking.attributes,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      "ms"
    }?,
    empty
  }

codem_lb =
  ## (line beginning) marks the beginning of a new (typographic) line in some edition or version of a text. [3.10.3. Milestone
  ## Elements 7.2.5. Speech Contents]
  element lb {
    empty,
    codem_att.global.attributes,
    codem_att.typed.attributes,
    codem_att.edition.attributes,
    codem_att.spanning.attributes,
    codem_att.breaking.attributes,
    empty
  }

codem_cb =
  ## (column beginning) marks the beginning of a new column of a text on a multi-column page. [3.10.3. Milestone
  ## Elements]
  element cb {
    empty,
    codem_att.global.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.edition.attributes,
    codem_att.spanning.attributes,
    codem_att.breaking.attributes,
    empty
  }

codem_author =
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]
  element author {
    codem_macro.phraseSeq,
    codem_att.global.attributes,
    codem_att.naming.attribute.nymRef,
    codem_att.canonical.attribute.key,
    codem_att.canonical.attribute.ref,
    empty
  }

codem_editor =
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.11.2.2. Titles, Authors, and Editors]
  element editor {
    codem_macro.phraseSeq,
    codem_att.global.attributes,
    codem_att.naming.attributes,
    empty
  }

codem_title =
  ## contains a title for any kind of work. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]
  element title {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.canonical.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.datable.attributes,
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub (subordinate) ; 3] alt (alternate) ; 4] short; 5] desc (descriptive) 
    attribute type {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
    }?,
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.
      "a" | ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works
        "m" | ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper
        "j" | ## (series) the title applies to a series of otherwise distinct publications such as a collection
        "s" | ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }

codem_bibl =
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element bibl {
    (text
     | codem_model.gLike
     | codem_model.highlighted
     | codem_model.pPart.data
     | codem_model.pPart.edit
     | codem_model.segLike
     | codem_model.ptrLike
     | codem_model.biblPart
     | codem_model.global)*,
    codem_att.global.attributes,
    codem_att.declarable.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.sortable.attributes,
    codem_att.docStatus.attributes,
    empty
  }

codem_teiHeader =
  ## (TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]
  element teiHeader {
    (codem_fileDesc, codem_model.teiHeaderPart*, codem_revisionDesc?),
    codem_att.global.attributes,
    empty
  }

codem_fileDesc =
  ## (file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]
  element fileDesc {
    ((codem_titleStmt, codem_editionStmt?, codem_publicationStmt),
     codem_sourceDesc+),
    codem_att.global.attributes,
    empty
  }

codem_titleStmt =
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]
  element titleStmt {
    (codem_title+, codem_model.respLike*),
    codem_att.global.attributes,
    empty
  }

codem_editionStmt =
  ## (edition statement) groups information relating to one edition of a text. [2.2.2. The Edition Statement 2.2. The File Description]
  element editionStmt {
    (codem_model.pLike+ | (codem_edition, codem_model.respLike*)),
    codem_att.global.attributes,
    empty
  }

codem_edition =
  ## describes the particularities of one edition of a text. [2.2.2. The Edition Statement]
  element edition {
    codem_macro.phraseSeq, codem_att.global.attributes, empty
  }

codem_publicationStmt =
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]
  element publicationStmt {
    ((codem_model.publicationStmtPart.agency,
      codem_model.publicationStmtPart.detail*)+
     | codem_model.pLike+),
    codem_att.global.attributes,
    empty
  }

codem_availability =
  ## supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. Publication, Distribution, Licensing, etc.]
  element availability {
    (codem_model.availabilityPart | codem_model.pLike)+,
    codem_att.global.attributes,
    codem_att.declarable.attributes,
    ## supplies a code identifying the current availability of the text.
    attribute status {
      ## the text is freely available.
      "free" | ## the status of the text is unknown.
        "unknown" | ## the text is not freely available.
        "restricted"
    }?,
    empty
  }

codem_sourceDesc =
  ## (source description) describes the source from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]
  element sourceDesc {
    (codem_model.pLike+
     | (codem_model.biblLike
        | codem_model.sourceDescPart
        | codem_model.listLike)+),
    codem_att.global.attributes,
    codem_att.declarable.attributes,
    empty
  }

codem_encodingDesc =
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3. The Encoding Description 2.1.1. The TEI Header and Its Components]
  element encodingDesc {
    (codem_model.encodingDescPart | codem_model.pLike)+,
    codem_att.global.attributes,
    empty
  }

codem_appInfo =
  ## (application information) records information about an application which has edited the TEI file. [2.3.10. The Application Information Element]
  element appInfo {
    codem_model.applicationLike+, codem_att.global.attributes, empty
  }

codem_application =
  ## provides information about an application which has acted upon the document. [2.3.10. The Application Information Element]
  element application {
    (codem_model.labelLike+,
     (codem_model.ptrLike* | codem_model.pLike*)),
    codem_att.global.attributes,
    codem_att.typed.attributes,
    codem_att.datable.attributes,
    ## supplies an identifier for the application, independent of its version number or display name.
    attribute ident { xsd:Name },
    ## supplies a version number for the application, independent of its identifier or display name.
    attribute version {
      xsd:token {
        pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}"
      }
    },
    empty
  }

codem_revisionDesc =
  ## (revision description) summarizes the revision history for a file. [2.6. The Revision Description 2.1.1. The TEI Header and Its Components]
  element revisionDesc {
    (codem_list | codem_change+),
    codem_att.global.attributes,
    codem_att.docStatus.attributes,
    empty
  }

codem_change =
  ## documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.6. The Revision Description 2.4.1. Creation 11.7. Identifying Changes and Revisions]
  element change {
    codem_macro.specialPara,
    codem_att.ascribed.attributes,
    codem_att.datable.attributes,
    codem_att.docStatus.attributes,
    codem_att.global.attributes,
    codem_att.typed.attributes,
    ## points to one or more elements that belong to this change.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
codem_att.global.facs.attributes = codem_att.global.facs.attribute.facs
codem_att.global.facs.attribute.facs =
  ## (facsimile) points to all or part of an image which corresponds with the content of the element.
  attribute facs {
    list { xsd:anyURI+ }
  }?
codem_att.global.change.attributes =
  codem_att.global.change.attribute.change
codem_att.global.change.attribute.change =
  ## points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.
  attribute change {
    list { xsd:anyURI+ }
  }?

codem_space =
  ## indicates the location of a significant space in the text. [11.5.1. Space]
  element space {
    (codem_model.descLike | codem_model.certLike)*,
    codem_att.global.attribute.xmlid,
    codem_att.global.attribute.n,
    codem_att.global.attribute.xmllang,
    codem_att.global.attribute.xmlbase,
    codem_att.global.attribute.xmlspace,
    codem_att.global.rendition.attribute.rend,
    codem_att.global.rendition.attribute.style,
    codem_att.global.rendition.attribute.rendition,
    codem_att.global.facs.attribute.facs,
    codem_att.global.change.attribute.change,
    codem_att.global.responsibility.attribute.cert,
    codem_att.global.source.attribute.source,
    codem_att.typed.attributes,
    codem_att.dimensions.attributes,
    ## (responsible party) (responsible party) indicates the individual responsible for identifying and measuring the space
    attribute resp {
      list { xsd:anyURI+ }
    }?,
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      ## the space is horizontal.
      "horizontal" | ## the space is vertical.
        "vertical"
    }?,
    empty
  }

codem_supplied =
  ## signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element supplied {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.editLike.attributes,
    codem_att.dimensions.attributes,
    ## one or more words indicating why the text has had to be supplied, e.g. overbinding, faded-ink, lost-folio, omitted-in-original.
    attribute reason {
      list {
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
      }
    }?,
    empty
  }

codem_TEI =
  ## (TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resourceLike class. Multiple TEI elements may be combined to form a teiCorpus element. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element TEI {
    (codem_teiHeader, codem_model.resourceLike+)
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    codem_att.global.attributes,
    codem_att.typed.attribute.subtype,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      "month"
    }?,
    empty
  }

codem_text =
  ## contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element text {
    (codem_model.global*,
     (codem_front, codem_model.global*)?,
     (codem_body),
     codem_model.global*,
     (codem_back, codem_model.global*)?),
    codem_att.global.attributes,
    codem_att.declaring.attributes,
    codem_att.typed.attributes,
    codem_att.written.attributes,
    empty
  }

codem_body =
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]
  element body {
    (codem_model.global*,
     (codem_model.divTop, (codem_model.global | codem_model.divTop)*)?,
     (codem_model.divGenLike,
      (codem_model.global | codem_model.divGenLike)*)?,
     ((codem_model.divLike,
       (codem_model.global | codem_model.divGenLike)*)+
      | (codem_model.div1Like,
         (codem_model.global | codem_model.divGenLike)*)+
      | ((codem_model.common, codem_model.global*)+,
         ((codem_model.divLike,
           (codem_model.global | codem_model.divGenLike)*)+
          | (codem_model.div1Like,
             (codem_model.global | codem_model.divGenLike)*)+)?)),
     (codem_model.divBottom, codem_model.global*)*),
    codem_att.global.attributes,
    codem_att.declaring.attributes,
    empty
  }

codem_div =
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]
  element div {
    ((codem_model.divTop | codem_model.global)*,
     ((((codem_model.divLike | codem_model.divGenLike),
        codem_model.global*)+
       | ((codem_model.common, codem_model.global*)+,
          ((codem_model.divLike | codem_model.divGenLike),
           codem_model.global*)*)),
      (codem_model.divBottom, codem_model.global*)*)?)
    >> sch:pattern [
         id = "codem-div-abstractModel-structure-l-constraint-report-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::tei:l"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "codem-div-abstractModel-structure-p-constraint-report-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:p or ancestor::tei:ab and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: p and ab may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    codem_att.global.attributes,
    codem_att.divLike.attributes,
    codem_att.typed.attribute.subtype,
    codem_att.declaring.attributes,
    codem_att.written.attributes,
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      "doc" | "docbody" | "docback" | "insertion" | "entry" | "month"
    }?,
    attribute mhs:startingOnPage { xsd:nonNegativeInteger }?,
    attribute mhs:volume { xsd:nonNegativeInteger }?,
    empty
  }

codem_dateline =
  ## contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. [4.2.2. Openers and Closers]
  element dateline {
    (text
     | codem_model.gLike
     | codem_model.phrase
     | codem_model.global)*,
    codem_att.global.attributes,
    empty
  }

codem_opener =
  ## groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. [4.2. Elements Common to All Divisions]
  element opener {
    (text
     | codem_model.gLike
     | codem_model.phrase
     | codem_dateline
     | codem_salute
     | codem_signed
     | codem_model.global)*,
    codem_att.global.attributes,
    codem_att.written.attributes,
    empty
  }

codem_closer =
  ## groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. [4.2.2. Openers and Closers 4.2. Elements Common to All Divisions]
  element closer {
    (text
     | codem_model.gLike
     | codem_signed
     | codem_dateline
     | codem_salute
     | codem_model.phrase
     | codem_model.global)*,
    codem_att.global.attributes,
    codem_att.written.attributes,
    empty
  }

codem_salute =
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. Openers and Closers]
  element salute {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.written.attributes,
    empty
  }

codem_signed =
  ## (signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. [4.2.2. Openers and Closers]
  element signed {
    codem_macro.paraContent,
    codem_att.global.attributes,
    codem_att.written.attributes,
    empty
  }

codem_front =
  ## (front matter) contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6. Title Pages 4. Default Text Structure]
  element front {
    ((codem_model.frontPart
      | codem_model.pLike
      | codem_model.pLike.front
      | codem_model.global)*,
     (((codem_model.div1Like,
        (codem_model.div1Like
         | codem_model.frontPart
         | codem_model.global)*)
       | (codem_model.divLike,
          (codem_model.divLike
           | codem_model.frontPart
           | codem_model.global)*)),
      (codem_model.divBottom,
       (codem_model.divBottom | codem_model.global)*)?)?),
    codem_att.global.attributes,
    codem_att.declaring.attributes,
    empty
  }

codem_back =
  ## (back matter) contains any appendixes, etc. following the main part of a text. [4.7. Back Matter 4. Default Text Structure]
  element back {
    ((codem_model.frontPart
      | codem_model.pLike.front
      | codem_model.pLike
      | codem_model.listLike
      | codem_model.global)*,
     ((codem_model.div1Like,
       (codem_model.frontPart
        | codem_model.div1Like
        | codem_model.global)*)
      | (codem_model.divLike,
         (codem_model.frontPart
          | codem_model.divLike
          | codem_model.global)*))?,
     (codem_model.divBottomPart,
      (codem_model.divBottomPart | codem_model.global)*)?),
    codem_att.global.attributes,
    codem_att.declaring.attributes,
    empty
  }

codem_table =
  ## contains text displayed in tabular form, in rows and columns. [14.1.1. TEI Tables]
  element table {
    ((codem_model.headLike | codem_model.global)*,
     ((codem_row, codem_model.global*)+
      | (codem_model.graphicLike, codem_model.global*)+),
     (codem_model.divBottom, codem_model.global*)*),
    codem_att.global.attributes,
    codem_att.typed.attribute.subtype,
    ## (columns) indicates the number of columns in each row of the table.
    attribute cols { xsd:nonNegativeInteger }?,
    empty
  }

codem_row =
  ## contains one row of a table. [14.1.1. TEI Tables]
  element row {
    codem_cell+,
    codem_att.global.attributes,
    codem_att.tableDecoration.attribute.role,
    codem_att.tableDecoration.attribute.cols,
    empty
  }

codem_cell =
  ## contains one cell of a table. [14.1.1. TEI Tables]
  element cell {
    codem_macro.specialPara,
    codem_att.global.attributes,
    codem_att.tableDecoration.attribute.role,
    codem_att.tableDecoration.attribute.rows,
    empty
  }

codem_persRef =
  ## (person reference) contains a reference (typically a non-name reference) to a person or person group
  element mhs:persRef {
    codem_macro.phraseSeq,
    codem_att.global.attributes,
    codem_att.naming.attributes,
    codem_att.typed.attributes,
    empty
  }
start = codem_TEI | codem_div
